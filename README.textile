h1. PHP DOM base Template engine

PHP製DOMベーステンプレートエンジン

* PythonのKidの様に属性値として記述できます。
* PHPのSmartyの様にファイルを設置しインクルードするだけで使えます。
* Smartyとの互換モードを実装しているので、既存のSmartyテンプレートを流用できます。
* jQueryライクなDOM操作でコンパイラの拡張ができます。
* jQueryライクなCSSセレクタを実装しています。

h2. タグ制御属性

h3. php:content

*php:contentの値をPHPとして評価した結果で要素内を置き換える*
<pre><code>
php). $php = 'world!!';
html). <div php:content="hello . $php">php:content</div>
output). <div>helloworld!!</div>
</code></pre>
※PHPの評価結果が偽と評価された場合、親要素（例ではdiv）自体を出力しません。
※php:replaceと同じ要素に指定した場合、php:replaceが優先されます。

h3. php:replace

*php:replaceの値をPHPとして評価した結果で親要素を置き換える*
<pre><code>
php). $php = 'world!!';
html). <div php:replace="'hello ' . $php">php:replace</div>
output). hello world!!
</code></pre>
※PHPの評価結果が偽と評価された場合、親要素（例ではdiv）自体を出力しません。
※php:contentと同じ要素に指定した場合、php:replaceが優先されます。
※php:attr, php:*を同じ要素に指定した場合、php:attr, php:*は評価されません。

h3. php:while

*php:whileの値をPHPとして評価した結果が"真"である限り出力します。*
<pre><code>
php). $php = 0;
html). <div php:while="$php++ < 3">hello</div>
output). <div>hello</div><div>hello</div><div>hello</div>
</code></pre>
※php:foreachと同じ要素に指定した場合、php:foreachが優先されます。

h3. php:foreach

*php:foreachの値をPHP::foreachとして評価し、配列要素分繰り返し出力します。*
<pre><code>
php). $php = array( 'apple', 'orange' );
html). <div php:foreach="$php as $var" php:content="$var">fruit</div>
output). <div>apple</div><div>orange</div>
</code></pre>
※php:whileと同じ要素に指定した場合、php:foreachが優先されます。

h3. php:foreachelse

*直前の兄弟要素の php:foreach の出力回数が0回の場合に、自要素を出力する。*
<pre><code>
php). $php = array();
html). <div php:foreach="$php as $var" php:content="$var">fruit</div><div php:foreachelse="">php:foreachelse</div>
output). <div>foreachelse</div>
</code></pre>

h3. php:if

*php:ifの値をPHP::ifとして評価し、"真"の場合のみ出力します。*
<pre><code>
php). $php = true;
html). <div php:if="$php">true</div><div php:if="!$php">false</div>
output). <div>true</div>
</code></pre>

h3. php:elseif

*直前の兄弟要素の php:if 又は php:elseif の評価が"偽"の場合に PHP:if として評価を行う。*
*また、値が空の場合は、PHP:else として評価し条件分岐を終了する。*
<pre><code>
php). $php = 'iphone';
html). <div php:if="$php == ipod">iPod</div><div php:elseif="$php == iphone">iPhone</div>
output). <div>iPhone</div>
</code></pre>

h3. php:cycle

*左辺の値を右辺へ循環代入する。*
<pre><code>
php). $php = array( 'apple', 'orange', 'banana' );
html). <div php:foreach="$php as $var" php:cycle="(odd,even) as $cls" php:class="$cls" php:content="$var">fruit</div>
output). <div class="odd">apple</div><div class="even">orange</div><div class="odd">banana</div>
</code></pre>
※php:foreach, php:while と同じ要素に指定した場合のみ評価します。

h3. php:attrs

*php:attrの値から親要素の属性を設定します。*
表記は [属性名=値]。複数指定の場合はカンマで区切ります。
<pre><code>
php). $src = 'image.jpg';  $alt = '画像';
html). <img php:attrs="src=http://example.com/ . $src, alt=$alt" />
output). <img src="http://example.com/image.jpg" alt="画像" />
</code></pre>
※php:replaceと同じ要素に指定した場合、評価しません。

h3. php:period

*php:period="StartTime, FinishTime" と記述し、StartTimeからFinishTimeの期間要素を出力します。*
<pre><code>
html). <div php:period="2011-02-15, 2011-03-15">php:period</div>
output). 2011-02-15から2011-03-15の期間出力。  <div>php:period</div>
</code></pre>
※指定フォーマットは、*yyyy-mm-dd hh:mm:ss* です。StartTime, FinishTime どちらか一方の指定も可能です。
※日付部分を省略し *hh:mm:ss* とした場合、実行時の日付として動作します。

h3. php:*

*php:*の値をPHPとして評価し、結果を親要素の*属性に設定します。*
<pre><code>
php). $src = 'image.jpg';  $alt = '画像';
html). <img php:src="http://example.com/ . $src" php:alt="$alt" />
output). <img src="http://example.com/image.jpg" alt="画像" />
</code></pre>
※php:replaceと同じ要素に指定した場合、評価しません。

h2. テンプレート関数

h3. document( $file )

*$fileをインクルードし、出力します。*
<pre><code>
include.html). Hello World!
html). <div php:content="document(include.html)">document()</div>
output). <div>Hello World!</div>
</code></pre>
※その他、PHPの組込関数や、グローバルスコープでコール可能な関数を利用できます。

h2. テンプレート変数の埋め込み

*${ 簡易PHP } とすることで、要素の属性値以外の場所へ記述できます。
<pre><code>
php). $php = 'hello!';
html). <div> ${$php} <\div>
output). <div>hello!<\div>
</code></pre>
※テンプレート関数なども利用可能です。

h2. 簡易PHP

文字列に引用符を必要としない基本的にPHPの文法です。
文字の塊を文字列として認識します。
空白含む文字列や演算子を文字列として扱いたい場合は、明示的に引用符で括ります。

h2. Smarty互換モード

クラスインスタンス生成時に下記のパラメータで有効になります。
*smarty* : Smartyのインスタンス
<pre><code>
include('./smarty/Smarty.class.php');
new Candy(array(
	"smarty" => new Smarty(),
	"cache-use" => true,
	"cache-directory" => "./cache/",
	"template-directory" => "./templates/",
));
</code></pre>

